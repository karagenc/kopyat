// Code generated by 'yaegi extract github.com/tomruk/kopyaship'. DO NOT EDIT.

package symbols

import (
	"github.com/tomruk/kopyaship"
	"github.com/tomruk/kopyaship/internal/scripting/ctx"
	"reflect"
)

func init() {
	Symbols["github.com/tomruk/kopyaship/kopyaship"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"GetContext": reflect.ValueOf(kopyaship.GetContext),

		// type definitions
		"BackupContext":          reflect.ValueOf((*kopyaship.BackupContext)(nil)),
		"Context":                reflect.ValueOf((*kopyaship.Context)(nil)),
		"IfileGenerationContext": reflect.ValueOf((*kopyaship.IfileGenerationContext)(nil)),

		// interface wrapper definitions
		"_Context": reflect.ValueOf((*_github_com_tomruk_kopyaship_Context)(nil)),
	}
}

// _github_com_tomruk_kopyaship_Context is an interface wrapper for Context type
type _github_com_tomruk_kopyaship_Context struct {
	IValue           interface{}
	WBackup          func() (c *ctx.BackupContext, ok bool)
	WIfileGeneration func() (c *ctx.IfileGenerationContext, ok bool)
}

func (W _github_com_tomruk_kopyaship_Context) Backup() (c *ctx.BackupContext, ok bool) {
	return W.WBackup()
}
func (W _github_com_tomruk_kopyaship_Context) IfileGeneration() (c *ctx.IfileGenerationContext, ok bool) {
	return W.WIfileGeneration()
}
