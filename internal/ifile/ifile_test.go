package ifile

import (
	"fmt"
	"os"
	"path/filepath"
	"regexp"
	"testing"

	"github.com/stretchr/testify/require"
	"go.uber.org/zap"
)

var testIfile = func(suffix string) string {
	f, err := filepath.Abs("test_ifile_" + suffix)
	if err != nil {
		panic(err)
	}
	return f
}

// Test whether it truncates the old ifile contents when appendToExisting is false.
func TestIfileOverwrite(t *testing.T) {
	testIfile := testIfile("ifile_overwrite")
	ifileFormRe := regexp.MustCompile(fmt.Sprintf("^.*%s\n%s\n([/a-zA-Z0-9-_. !#]+\n)+%s\n$",
		regexp.QuoteMeta(generatedBy),
		regexp.QuoteMeta(beginIndicator),
		regexp.QuoteMeta(endIndicator),
	))

	os.Remove(testIfile)
	i, err := New(testIfile, ModeSyncthing, false, zap.NewNop())
	require.NoError(t, err)

	path, err := filepath.Abs("..")
	require.NoError(t, err)
	err = i.Walk(path)
	require.NoError(t, err)
	err = i.Close()
	require.NoError(t, err)

	content, err := os.ReadFile(testIfile)
	require.NoError(t, err)

	require.True(t, ifileFormRe.Match(content))

	i, err = New(testIfile, ModeSyncthing, false, zap.NewNop())
	require.NoError(t, err)
	err = i.Walk(path)
	require.NoError(t, err)
	err = i.Close()
	require.NoError(t, err)

	require.True(t, ifileFormRe.Match(content))
}

// Test whether it successfully adds entries between beginIndiator and endIndicator, preserving old contents when appendToExisting is true.
func TestIfileAppend(t *testing.T) {
	testIfile := testIfile("ifile_append")
	content := []byte(`# This is a comment.

/this/is/a/test/entry

`)

	ifileFormRe := regexp.MustCompile(fmt.Sprintf("^%s%s\n%s\n([/a-zA-Z0-9-_. !#]+\n)+%s\n$",
		regexp.QuoteMeta(string(content)),
		regexp.QuoteMeta(generatedBy),
		regexp.QuoteMeta(beginIndicator),
		regexp.QuoteMeta(endIndicator),
	))

	os.Remove(testIfile)
	err := os.WriteFile(testIfile, content, 0644)
	require.NoError(t, err)

	i, err := New(testIfile, ModeSyncthing, true, zap.NewNop())
	require.NoError(t, err)

	path, err := filepath.Abs("..")
	require.NoError(t, err)
	err = i.Walk(path)
	require.NoError(t, err)
	err = i.Close()
	require.NoError(t, err)

	content, err = os.ReadFile(testIfile)
	require.NoError(t, err)

	require.True(t, ifileFormRe.Match(content))

	i, err = New(testIfile, ModeSyncthing, true, zap.NewNop())
	require.NoError(t, err)
	err = i.Walk(path)
	require.NoError(t, err)
	err = i.Close()
	require.NoError(t, err)

	require.True(t, ifileFormRe.Match(content))
}

// Test whether it successfully adds entries between beginIndiator and endIndicator, preserving old contents when appendToExisting is true.
func TestIfileAppend2(t *testing.T) {
	testIfile := testIfile("ifile_append2")
	contentStart := `# This is a comment.

/this/is/a/test/entry

`

	contentMiddle := `# Generated by kopyat. DO NOT TOUCH THE LINES BETWEEN I_BEGIN AND I_END.
# I_BEGIN
# I_END`
	contentEnd := `

/this/is/a/test/entry/after/ifile/end
/this/is/a/test/entry/after/ifile/end2
`

	ifileFormRe := regexp.MustCompile(fmt.Sprintf("^%s%s\n%s\n([/a-zA-Z0-9-_. !#]+\n)+%s%s$",
		regexp.QuoteMeta(contentStart),
		regexp.QuoteMeta(generatedBy),
		regexp.QuoteMeta(beginIndicator),
		regexp.QuoteMeta(endIndicator),
		regexp.QuoteMeta(contentEnd),
	))

	os.Remove(testIfile)
	err := os.WriteFile(testIfile, []byte(contentStart+contentMiddle+contentEnd), 0644)
	require.NoError(t, err)

	i, err := New(testIfile, ModeSyncthing, true, zap.NewNop())
	require.NoError(t, err)

	path, err := filepath.Abs("..")
	require.NoError(t, err)
	err = i.Walk(path)
	require.NoError(t, err)
	err = i.Close()
	require.NoError(t, err)

	content, err := os.ReadFile(testIfile)
	require.NoError(t, err)

	require.True(t, ifileFormRe.Match(content))

	i, err = New(testIfile, ModeSyncthing, true, zap.NewNop())
	require.NoError(t, err)
	err = i.Walk(path)
	require.NoError(t, err)
	err = i.Close()
	require.NoError(t, err)

	require.True(t, ifileFormRe.Match(content))
}
